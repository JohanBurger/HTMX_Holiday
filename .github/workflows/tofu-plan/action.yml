name: 'OpenTofu Plan Composite Action'
description: 'Composite action to run OpenTofu commands'
inputs:
  token:
    description: "Github PAT"
    required: true

runs:
  using: 'composite'
  steps:
    - uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: '1.8'

    - name: OpenTofu Format
      id: format
      shell: bash
      run: tofu -chdir $TOFU_CLI_PATH fmt -check
      continue-on-error: true

    - name: OpenTofu Init
      id: init
      shell: bash
      run: tofu -chdir $TOFU_CLI_PATH init

    - name: OpenTofu Validate
      id: validate
      shell: bash
      run: tofu -chdir $TOFU_CLI_PATH validate -no-color

    - name: OpenTofu Plan
      id: plan
      shell: bash
      run: tofu -chdir $TOFU_CLI_PATH plan -no-color

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### OpenTofu Format and Style üñå\`${{ steps.format.outcome }}\`
          #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }