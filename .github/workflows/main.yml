name: Docker image build
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python for testing
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV
      - name: Run unit tests
        run: pytest

#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up Python for linting
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.12'
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8
#      - name: Run linting
#        run: flake8 .

  build:
    runs-on: ubuntu-latest
#    needs: [test, lint]
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build the docker image
        run: docker build . --file Dockerfile --tag holidays:$(date +%s)
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Tag and push Docker image to ECR
        run: |
          IMAGE_TAG=$(date +%s)
          REPOSITORY_URI=${{ secrets.ECR_URI }}
          docker tag holidays:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
          docker push $REPOSITORY_URI:$IMAGE_TAG