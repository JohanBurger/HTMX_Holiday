name: Docker image build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python for testing
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV
      - name: Run unit tests
        run: python -m unittest discover -s tests

  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/my-github-actions-role
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build the docker image
        run: docker build . --file Dockerfile --tag holidays:$(date +%s)

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Tag and push Docker image to ECR
        run: |
          IMAGE_TAG=$(date +%s)
          REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME}}
          docker tag holidays:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
          docker push $REPOSITORY_URI:$IMAGE_TAG